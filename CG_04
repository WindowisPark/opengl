#include <GL/glew.h>
#include <GL/freeglut.h>
#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>
#include <iostream>
#include <assimp/material.h>
// 광원 상태
int light0_enabled = 0;
int light1_enabled = 0;
float rotationAngleZ = 0.0f;

Assimp::Importer importer;
const aiScene* scene = nullptr;

void initModel(const char* filename) {
    scene = importer.ReadFile(filename, aiProcess_Triangulate | aiProcess_FlipUVs | aiProcess_GenNormals);
    if (!scene) {
        std::cerr << "Error loading model: " << importer.GetErrorString() << std::endl;
        exit(EXIT_FAILURE);
    }
}

void applyMaterial(const aiMaterial* material) {
    aiColor4D diffuse;
    aiColor4D specular;
    aiColor4D ambient;
    aiColor4D emission;
    float shininess, strength;
    int ret1, ret2;

    // Ambient Color
    if (AI_SUCCESS == aiGetMaterialColor(material, AI_MATKEY_COLOR_AMBIENT, &ambient))
        glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, (GLfloat*)&ambient);

    // Diffuse Color
    if (AI_SUCCESS == aiGetMaterialColor(material, AI_MATKEY_COLOR_DIFFUSE, &diffuse))
        glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, (GLfloat*)&diffuse);

    // Specular Color
    if (AI_SUCCESS == aiGetMaterialColor(material, AI_MATKEY_COLOR_SPECULAR, &specular))
        glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, (GLfloat*)&specular);

    // Emission Color
    if (AI_SUCCESS == aiGetMaterialColor(material, AI_MATKEY_COLOR_EMISSIVE, &emission))
        glMaterialfv(GL_FRONT_AND_BACK, GL_EMISSION, (GLfloat*)&emission);

    // Shininess
    if (AI_SUCCESS == aiGetMaterialFloat(material, AI_MATKEY_SHININESS, &shininess)) {
        // Check if shininess strength is also available
        if (AI_SUCCESS == aiGetMaterialFloat(material, AI_MATKEY_SHININESS_STRENGTH, &strength))
            shininess *= strength;

        glMaterialf(GL_FRONT_AND_BACK, GL_SHININESS, shininess);
    }
}
void renderModel() {
    if (scene) {
        glPushMatrix();
        glScalef(1.0f, 1.0f, 1.0f);

        for (unsigned int n = 0; n < scene->mNumMeshes; ++n) {
            const aiMesh* mesh = scene->mMeshes[n];

            // 재질 설정
            const aiMaterial* material = scene->mMaterials[mesh->mMaterialIndex];
            applyMaterial(material);  // 이 함수는 재질 속성을 OpenGL에 설정하는 사용자 정의 함수입니다.

            glBegin(GL_TRIANGLES);
            for (unsigned int i = 0; i < mesh->mNumFaces; i++) {
                const aiFace& face = mesh->mFaces[i];
                for (unsigned int j = 0; j < face.mNumIndices; j++) {
                    // 노멀 설정
                    if (mesh->HasNormals()) {
                        aiVector3D normal = mesh->mNormals[face.mIndices[j]];
                        glNormal3f(normal.x, normal.y, normal.z);
                    }

                    // 텍스처 좌표 설정
                    if (mesh->HasTextureCoords(0)) {  // 첫 번째 텍스처 좌표 배열 사용
                        aiVector3D texCoord = mesh->mTextureCoords[0][face.mIndices[j]];
                        glTexCoord2f(texCoord.x, texCoord.y);
                    }

                    // 정점 위치 설정
                    aiVector3D vertex = mesh->mVertices[face.mIndices[j]];
                    glVertex3f(vertex.x, vertex.y, vertex.z);
                }
            }
            glEnd();
        }
        glPopMatrix();
    }
}

void init() {
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_LIGHTING);
    GLfloat white_light[] = { 1.0, 1.0, 1.0, 1.0 };
    GLfloat light0_position[] = { 1.0, 1.0, 1.0, 0.0 };
    glLightfv(GL_LIGHT0, GL_DIFFUSE, white_light);
    glLightfv(GL_LIGHT0, GL_POSITION, light0_position);
    glEnable(GL_LIGHT0);

    GLfloat blue_light[] = { 0.0, 0.0, 1.0, 1.0 };
    GLfloat light1_position[] = { -1.0, -1.0, 1.0, 0.0 };
    glLightfv(GL_LIGHT1, GL_DIFFUSE, blue_light);
    glLightfv(GL_LIGHT1, GL_POSITION, light1_position);
    glEnable(GL_LIGHT1);

    glClearColor(0.0, 0.0, 0.0, 1.0);
    glShadeModel(GL_SMOOTH);

    // 여기에서 파일명을 업데이트
    initModel("C:\\Users\\pch\\cg4.obj"); // 모델 로드

}
void drawAxes() {
    // 축 그리기를 위해 조명 비활성화
    glDisable(GL_LIGHTING);
    glBegin(GL_LINES);
    // X 축, 빨간색
    glColor3f(1.0, 0.0, 0.0);
    glVertex3f(0.0, 0.0, 0.0);
    glVertex3f(100.0, 0.0, 0.0);
    // Y 축, 초록색
    glColor3f(0.0, 1.0, 0.0);
    glVertex3f(0.0, 0.0, 0.0);
    glVertex3f(0.0, 100.0, 0.0);
    // Z 축, 파란색
    glColor3f(0.0, 0.0, 1.0);
    glVertex3f(0.0, 0.0, 0.0);
    glVertex3f(0.0, 0.0, 100.0);
    glEnd();
    // 조명 다시 활성화
    glEnable(GL_LIGHTING);
}
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    gluLookAt(5.0, 5.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    glRotatef(rotationAngleZ, 0.0, 0.0, 1.0);

    // 축 그리기
    drawAxes();

    // 조명 상태에 따라 조명 활성화/비활성화
    if (light0_enabled) glEnable(GL_LIGHT0);
    else glDisable(GL_LIGHT0);
    if (light1_enabled) glEnable(GL_LIGHT1);
    else glDisable(GL_LIGHT1);

    // 모델 렌더링
    renderModel();

    glutSwapBuffers();
}

void mouseMove(int x, int y) {
    static int lastX = x;
    int deltaX = x - lastX;
    rotationAngleZ += deltaX * 0.1f;
    lastX = x;
    glutPostRedisplay();
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
    case '0': light0_enabled = !light0_enabled; break;
    case '1': light1_enabled = !light1_enabled; break;
    case '2': light0_enabled = 1; light1_enabled = 1; break;
    case '3': light0_enabled = 0; light1_enabled = 0; break;
    case 27: exit(0);  // ESC key
    }
    glutPostRedisplay();
}

void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60.0, (GLfloat)w / (GLfloat)h, 1.0, 100.0);
    glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(640, 480);
    glutCreateWindow("3D Model Viewer with Interactive Lighting");
    GLenum err = glewInit();
    if (GLEW_OK != err) {
        std::cerr << "Error initializing GLEW: " << glewGetErrorString(err) << std::endl;
        return -1;
    }

    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutMotionFunc(mouseMove);
    glutMainLoop();
    return 0;
}
